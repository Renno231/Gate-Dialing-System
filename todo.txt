Gate Dialing System
Concept: GDS will be operated by tablet only with a very lightweight interface with an integrated command bar, output, and address window
         the actual dialing will be executed by a (gate) computer connected to the gate at the address
         known addresses will be stored on the tablet, but can also be exported/synced/shared
         note: color coded is kind of weird in OC so maybe not color coded (low priority)

features to impliment
    tablet:
        add scrolling to output window 
        make command prefix modifiable
        replace history tab with network tab
        add networking-based commands
            e.g.,   set entry entryName network networkName/index
                    set entry entryName netpass somePassword
                    set entry entryName hashcode somePassword
            details: networks are a preset table of data that defines a network such as adminList, network password (netpass), hashcode (used to encrypt password), 
                     modem channel, custom IDCs, and whatever things that come in the future
        add preset tab
            ^ details: preset commands that execute a series of predefined commands via double click or direct execution in the command bar
        user-user and in-general chat and address/database sharing 
            ^ details:  to prevent spam, a rate limit of 1 message per 0.1 seconds will apply unless they are blocked in which case all messages will be ignored
                        to enable or disable chat, use ";set chat on/off|true/false" or ";set chat" to toggle
                        to enable or disable messages from unnamed computers, use ";set namedonly on/off|true/false" or ";set namedonly" to toggle
                        to make contact with others, use ";speak nearby insertMessageHere" 
                        to get past rate limit, the user must use ";trust uuid/nickname" (partial match compatibility, ";untrust" works the same)
                        to change or set the screen name of a uuid, users can use ";set screenname/sname/nick/nickname uuid someNewName" (partial match compatibility, if name argument is nil, nickname will be removed)
                        to retrieve a nickname, use ";get screenname/sname/nick/nickname uuid"
                        to retrieve a uuid from a nickname, use ";get modemid/mdid screenname/sname/nick/nickname"
                        to retrieve a list of all nicknames and uuids, use ";get screennames/snames/nicks/nicknames"
                        to accept or deny incoming messages, use ";accept uuid/nickname" or ";deny uuid/nickname" (partial match compatibility, performs command on the last first received data if no argument is passed) 
                        to block or unblock users, ";block uuid/nickname", ";unblock uuid/nickname" (partial match compatibility)
                        to see blocked users, ";get blocked" (name:uuid or uuid if no name is set)
                        to share entries use ";share database uuid/nickname entryname/index,entryname/index,entryname/index,..." (partial match compatibility)
                        to share networks use ";share network uuid/nickname networkname/index" (partial match compatibility)
        buffer of previous commands in order (20 indexes), selectable with up and down arrow
        short range toggle-able chat system (maybe a tab on the output window if chatting = true) (low priority)
            ^ note: will need to add block command to ignore messages from certain players in the instance of abuse (spam) or whatever

    gatecomputer:
        add kawoosh-protection for outgoing wormholes 
            ^ details: if iris type is shield and power is plentiful, activate on dialing start, and disable when wormhole has stabilized
        multiple IDCs support in gate computers
            ^ note: major problem with this is that it won't work when the gate is on automatic mode
                    although, since computers can now be turned on via redstone (which DHD emits when the gate is activated), it is now viable to do IDCs via modem.send
        add NetworkPassword (netpass) settings, decryption, hash generation, and permission check for comparison 
        add setting option to require valid netpass to execute stargate based commands like dial, close, pause, etc
        add NotificationListeners list 
        add announcement (to NotificationListeners list) of incoming and outgoing wormholes and other events
            ^ details: if outgoing, send only to those on the list that didn't trigger the command. If a valid IDC was provided and its linked to a specific identity, include the identity too
            ^ note: semi-difficult to do, perhaps with network setting configuration have incomingUpdateList = {modemuuid, ...}
        user-gatecomputer database export (only works if the specified gate computer has a floppy disk and disk drive available)
            ^ note: unsure if this will be all that viable since tablets can be put into a charger and have files copied from /mnt/
        change "gds -u" to "gds --update"
        change update protocol to check for floppy with GDS files first, then check for internet card if viable floppy disk files aren't found
            ^ details: if netpass is set, do decryption and compare that the password is correct first
                       ideally an OpenOS floppy would be modded and install GDS with it and whatever premade settings are detected (if any)
                       check would happen on startup of the program (in the bin file) 
        add "gds --netflash:overwrite/replace" (overwrite is default) which checks for floppy with valid GDS network settings
            ^ note: if netpass is set, do decryption and compare that the password is correct first

commands usage/documentation:
    use case example:
        semicolon is the command prefix which is how the program determins what is or isn't a command
        ;command ... ;command ... (<- sequential)

    set [option]
        range/radius [number in range from 16 to 400]

    get [option]
        nearby - sends out a modem signal to query and update the nearby dialing computers to the local gates list
        last - shows data about the last dialed address
        address/adrs [name] [glyphset] - shows the desired set of glyphs at the address if known
        memoryusage/memuse/mem/mu - shows the current % and total memory used
    
    redial [address]
        redials the last dialed address or last address dialed from the last gate used

    dial [address A] [address B] [timeout]
        dials the address from A to B with an optional timeout
        example: dial AlphaSite Homebase 30

    dial [address]
        dials the address from the last used gate if possible, or the nearest gate
        example: dial Alphasite

    close [address]
        if nil, use last address
        example: close Alphasite
        example: close

    abort [address]
        aborts the dialing sequence of the gate at the specified address or the last gate used 

    iris [state]
        on - activates iris
        off - deactivates iris
        nil - toggles iris

    select/choose/slt [option]
        address [name]
            example: select address Homebase
        address [type (MW, UNI, PG)] [index] - selected the first address of that type nearby or the index given if that index of that type exists
            example: select address MW 3
            example: select adrs MW furthest
            example: select adrs MW 
                        ^ returns the nearest 

    edit [option]
        address/adrs [name] [glyphset (MW, UNI, PG)] symbol 1, symbol 2, ... - creates or modifies an address with name and symbols
            example: edit home MW symbol 1, symbol 2, ...
        address/adrs [name] [uuid] uniqueid - creates or modifies a known address with a component uuid
            example: edit home uuid 1234
        address/adrs [name] [idc] name code
            example: edit home idc TheHomie 1234

    rename/rname/rn/ [option]
        address/adrs [name A] [name B]
            example: rn AlphaSite BetaSite

    add [option]
        address/adrs [name] [glyphset (MW, UNI, PG)] [symbols (not case sensitive)] - attempts to create an address with name and symbols
        address/adrs [name] [uuid] - creates known a address from a component matching the uuid if applicable
                ^ note: this works best when working with gates shown in the local gates tab that aren't yet indexed in the database since they are shown with OC uuids
        idc [address] [code] 
                ^ note: idc[code] = name <-- automatic

    quit/exit/close
        exits the program